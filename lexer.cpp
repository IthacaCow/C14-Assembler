#line 2 "lexer.cpp"

#line 4 "lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 18
#define YY_END_OF_BUFFER 19
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1429] =
    {   0,
        0,    0,   19,   18,    9,    7,   18,    1,   18,   18,
       12,   12,   18,   15,   15,   15,   15,    2,    3,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,    9,    0,    8,   12,    0,    0,
        6,   15,   17,   13,   15,   15,   10,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,    0,   16,   11,    5,

        4,   15,   15,   15,   15,   15,   15,   15,    0,    0,
        0,    0,    0,   15,   15,   15,   15,   15,   15,    0,
       15,    0,   15,   15,   15,    0,   15,    0,    0,    0,
        0,    0,   15,   15,   15,   15,   15,   15,    0,    0,
       15,   15,   15,   15,   15,    0,    0,   15,    0,   15,
       15,   15,    0,    0,   15,    0,    0,   15,    0,   15,
       15,   15,   15,   15,    0,   15,    0,   15,   15,   15,
       15,   15,   15,   15,    0,   15,   15,    0,    0,    0,
        0,    0,    0,   15,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   15,

        0,   15,    0,    0,    0,   15,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   15,   15,    0,   15,    0,   15,    0,    0,
        0,    0,    0,    0,   15,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   15,   15,   15,   15,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   14,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    1,    5,    1,    1,    1,    1,    6,
        1,    1,    1,    7,    8,    9,    1,   10,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   12,    1,    1,
       13,    1,   14,    1,   15,   15,   15,   16,   17,   15,
       18,   18,   18,   18,   18,   18,   18,   18,   19,   20,
       21,   22,   23,   18,   24,   18,   25,   18,   18,   18,
       26,    1,   27,    1,   18,    1,   28,   29,   30,   31,

       32,   15,   33,   34,   35,   36,   18,   37,   38,   39,
       40,   41,   18,   42,   43,   44,   45,   46,   47,   48,
       18,   49,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[50] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        2,    3,    1,    1,    4,    4,    4,    5,    5,    5,
        5,    5,    5,    5,    5,    1,    1,    4,    4,    4,
        4,    4,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5
    } ;

static yyconst flex_int16_t yy_base[1434] =
    {   0,
        0,    0, 1698, 1699,   48, 1699, 1694, 1699,   43,    0,
       45,   47, 1682, 1683,   47,   39,   84, 1699, 1699,   49,
      105,   52,   53,   50,  143,   54,   57,   61,   62,   66,
      163,   96,   55,   79,   73, 1691, 1699,   99, 1681,    0,
     1699, 1680, 1699, 1679,   56,   74, 1678,  110,  117,  122,
      112,   80,  114,  116,  119,  146,  176,  155,  152,  120,
      115,  124,  165,  159,  162,  166,  179,  182,  185,  199,
      212,  186,  139,  198,  207,  216,  225,  226,  148,  214,
      227,  228,  229,  232,  239,  215,  242,  238,  251,  241,
      237,  246,  253,  265,  244,  250, 1677, 1699,    0, 1676,

     1675,  271,  280,  283,  285,  286,  287,  256, 1659, 1658,
     1657, 1656, 1655,  290,  292,  296,  297,  299,  301, 1654,
      302, 1653,  303,  308,  306, 1652,  312, 1651, 1650, 1649,
     1648, 1647,  313,  315,  317,  318,  319,  322, 1646, 1645,
      324,  328,  333,  334,  335, 1644, 1643,  340, 1642,  344,
      345,  321, 1641, 1640,  347, 1639, 1638,  349, 1637,  350,
      354,  356,  360,  366, 1636,  370, 1635,  372,  373,  351,
      353,  379,  382,  383, 1634,  385,  388, 1633, 1632, 1631,
     1630, 1629, 1628,  389, 1650, 1649, 1648, 1647, 1646, 1622,
     1621, 1620, 1619, 1618, 1617, 1639, 1615, 1637, 1613,  392,

     1612,  394, 1611, 1633, 1609,  395, 1631, 1630, 1629, 1628,
     1627, 1603, 1602, 1601, 1600, 1599, 1598, 1620, 1619, 1595,
     1594, 1593,  398,  399, 1592,  401, 1591,  404, 1613, 1612,
     1588, 1610, 1586, 1585,  405, 1607, 1606, 1582, 1604, 1603,
     1579, 1601, 1577, 1576, 1575, 1574, 1573, 1595, 1571, 1593,
     1569, 1568,  408,  410,  411,  414, 1567, 1566, 1565, 1587,
     1563, 1562, 1584, 1583, 1582, 1581, 1580, 1579, 1555, 1568,
     1567, 1566, 1565, 1564, 1572, 1571, 1570, 1569, 1568, 1567,
     1557, 1565, 1555, 1563, 1539, 1561, 1537, 1559, 1549, 1557,
     1533, 1546, 1545, 1544, 1543, 1542, 1550, 1549, 1548, 1547,

     1546, 1545, 1535, 1534, 1542, 1541, 1540, 1516, 1515, 1537,
     1513, 1535, 1511, 1524, 1523, 1531, 1521, 1529, 1528, 1504,
     1517, 1516, 1524, 1514, 1513, 1521, 1511, 1519, 1518, 1517,
     1516, 1515, 1505, 1513, 1503, 1511, 1510, 1486, 1485, 1484,
     1483, 1505, 1504, 1503, 1493, 1501, 1500, 1490, 1489, 1488,
     1487, 1486, 1485, 1493, 1492, 1491, 1490, 1489, 1488, 1478,
     1477, 1476, 1475, 1474, 1473, 1481, 1471, 1479, 1469, 1477,
     1467, 1475, 1465, 1473, 1463, 1471, 1470, 1469, 1468, 1467,
     1466, 1456, 1455, 1454, 1453, 1452, 1451, 1459, 1458, 1448,
     1447, 1446, 1454, 1453, 1443, 1451, 1441, 1449, 1448, 1447,

     1437, 1445, 1435, 1434, 1442, 1441, 1440, 1430, 1438, 1437,
     1427, 1435, 1425, 1424, 1423, 1422, 1421, 1429, 1419, 1427,
     1417, 1416, 1424, 1423, 1422, 1421, 1411, 1410, 1409, 1417,
     1407, 1406, 1414, 1413, 1412, 1411, 1410, 1409, 1399, 1372,
     1371, 1370, 1369, 1368, 1402, 1401, 1400, 1399, 1398, 1397,
     1361, 1395, 1359, 1393, 1383, 1391, 1381, 1389, 1353, 1387,
     1377, 1350, 1349, 1348, 1347, 1346, 1380, 1379, 1378, 1377,
     1376, 1375, 1339, 1338, 1372, 1371, 1370, 1360, 1359, 1367,
     1357, 1365, 1355, 1328, 1327, 1361, 1325, 1359, 1358, 1348,
     1321, 1320, 1354, 1318, 1317, 1351, 1315, 1349, 1348, 1347,

     1346, 1345, 1309, 1343, 1307, 1341, 1340, 1330, 1329, 1328,
     1327, 1335, 1334, 1333, 1297, 1331, 1330, 1294, 1293, 1292,
     1291, 1290, 1289, 1323, 1294, 1293, 1292, 1291, 1290, 1282,
     1281, 1280, 1279, 1278, 1277, 1283, 1275, 1281, 1273, 1307,
     1271, 1305, 1269, 1275, 1267, 1301, 1272, 1271, 1270, 1269,
     1268, 1260, 1259, 1258, 1257, 1256, 1255, 1261, 1260, 1252,
     1251, 1250, 1284, 1283, 1247, 1281, 1245, 1279, 1250, 1249,
     1241, 1247, 1239, 1238, 1272, 1243, 1242, 1234, 1240, 1239,
     1231, 1237, 1229, 1228, 1227, 1226, 1225, 1231, 1223, 1229,
     1221, 1220, 1254, 1253, 1252, 1251, 1215, 1214, 1213, 1219,

     1211, 1210, 1216, 1215, 1214, 1213, 1212, 1211, 1203, 1194,
     1193, 1192, 1191, 1190, 1204, 1203, 1202, 1201, 1200, 1199,
     1183, 1197, 1181, 1195, 1187, 1193, 1185, 1191, 1175, 1189,
     1181, 1172, 1171, 1170, 1169, 1168, 1182, 1181, 1180, 1179,
     1178, 1177, 1161, 1160, 1174, 1173, 1172, 1164, 1163, 1169,
     1160,   49,  100,  118,  125,  147,  152,  227,  234,  232,
      231,  233,  303,  295,  320,  348,  372,  389,  392,  393,
      395,  396,  382,  398,  384,  400,  401,  395,  396,  397,
      398,  406,  407,  408,  394,  410,  411,  397,  398,  399,
      400,  401,  402,  418,  447,  448,  449,  450,  451,  409,

      410,  411,  412,  413,  414,  458,  416,  460,  418,  434,
      420,  436,  422,  466,  424,  440,  469,  470,  471,  472,
      473,  431,  432,  433,  434,  435,  436,  480,  481,  439,
      440,  441,  457,  458,  444,  460,  446,  462,  491,  492,
      450,  494,  452,  453,  469,  498,  499,  457,  501,  502,
      460,  504,  462,  463,  464,  465,  466,  510,  468,  512,
      470,  471,  487,  488,  489,  490,  476,  477,  478,  522,
      480,  481,  525,  526,  527,  528,  529,  530,  488,  517,
      518,  519,  520,  521,  537,  538,  539,  540,  541,  542,
      528,  544,  530,  546,  504,  548,  506,  550,  536,  552,

      510,  539,  540,  541,  542,  543,  559,  560,  561,  562,
      563,  564,  550,  551,  567,  568,  569,  527,  528,  572,
      530,  574,  532,  561,  562,  578,  564,  580,  581,  539,
      568,  569,  585,  571,  572,  588,  574,  590,  591,  592,
      593,  594,  580,  596,  582,  598,  599,  557,  558,  559,
      560,  604,  605,  606,  592,  608,  609,  595,  596,  597,
      598,  599,  600,  616,  580,  581,  582,  583,  584,  607,
      608,  609,  610,  611,  612,  591,  614,  593,  616,  632,
      618,  634,  620,  599,  622,  638,  602,  603,  604,  605,
      606,  629,  630,  631,  632,  633,  634,  613,  614,  637,

      638,  639,  655,  656,  642,  658,  644,  660,  624,  625,
      648,  627,  650,  651,  667,  631,  632,  655,  634,  635,
      658,  637,  660,  661,  662,  663,  664,  643,  666,  645,
      668,  669,  685,  686,  687,  688,  674,  675,  676,  655,
      678,  679,  658,  659,  660,  661,  662,  663,  686,  700,
      701,  702,  703,  704,  670,  671,  672,  673,  674,  675,
      711,  677,  713,  679,  702,  681,  704,  683,  719,  685,
      708,  722,  723,  724,  725,  726,  692,  693,  694,  695,
      696,  697,  733,  734,  700,  701,  702,  725,  726,  705,
      728,  707,  730,  744,  745,  711,  747,  713,  714,  737,

      751,  752,  718,  754,  755,  721,  757,  723,  724,  725,
      726,  727,  763,  729,  765,  731,  732,  755,  756,  757,
      758,  737,  738,  739,  775,  741,  742,  778,  779,  780,
      781,  782,  783,  749,  787,  788,  789,  790,  791,  790,
      791,  792,  793,  794,  795,  798,  797,  800,  799,  765,
      801,  767,  803,  806,  805,  771,  809,  810,  811,  812,
      813,  812,  813,  814,  815,  816,  817,  820,  821,  820,
      821,  822,  788,  789,  825,  791,  827,  793,  831,  832,
      831,  834,  833,  834,  800,  838,  839,  838,  841,  842,
      841,  844,  843,  844,  845,  846,  847,  850,  849,  852,

      851,  852,  818,  819,  820,  821,  857,  858,  859,  862,
      861,  862,  865,  866,  867,  868,  869,  870,  869,  846,
      847,  848,  849,  850,  877,  878,  879,  880,  881,  882,
      857,  884,  859,  886,  885,  888,  887,  890,  860,  892,
      891,  862,  863,  864,  865,  866,  899,  900,  901,  902,
      903,  904,  873,  874,  907,  908,  909,  908,  909,  912,
      911,  914,  913,  881,  881,  918,  883,  920,  921,  920,
      885,  886,  925,  888,  889,  928,  891,  930,  931,  932,
      933,  934,  897,  936,  899,  938,  939,  938,  939,  940,
      941,  944,  945,  946,  907,  948,  949,  926,  927,  928,

      929,  930,  931,  956,  931,  930,  930,  927,  927,  936,
      937,  938,  939,  940,  941,  931,  943,  925,  944,  972,
      946,  974,  945,  941,  946,  978,  953,  952,  952,  949,
      949,  952,  953,  954,  955,  956,  957,  953,  946,  959,
      960,  960,  995,  996,  963,  998,  965, 1000,  961,  964,
      967,  963,  969,  969, 1007,  982,  981,  972,  982,  979,
      975,  980,  977,  978,  979,  980,  981,  983,  983,  977,
      984,  985, 1025, 1026, 1027, 1028,  990,  991,  992, 1008,
      989,  990, 1009, 1009, 1010, 1011, 1004, 1005, 1015, 1699,
     1008, 1008, 1009, 1010, 1011, 1012, 1011, 1023, 1023, 1020,

     1025, 1020, 1019, 1024, 1022, 1022, 1023, 1024, 1025, 1026,
     1035, 1036, 1028, 1031, 1032, 1026, 1034, 1027, 1036, 1033,
     1031, 1037, 1037, 1047, 1043, 1042, 1043, 1044, 1045, 1046,
     1044, 1058, 1059, 1046, 1047, 1048, 1049, 1049, 1049, 1050,
     1056, 1055, 1063, 1069, 1069, 1066, 1071, 1068, 1076, 1064,
     1076, 1075, 1075, 1072, 1061, 1076, 1070, 1083, 1068, 1080,
     1072, 1075, 1079, 1078, 1090, 1089, 1089, 1086, 1075, 1097,
     1091, 1081, 1088, 1089, 1093, 1086, 1097, 1087, 1099, 1100,
     1095, 1092, 1094, 1104, 1110, 1109, 1109, 1106, 1095, 1110,
     1117, 1112, 1114, 1115, 1116, 1117, 1117, 1124, 1119, 1113,

     1121, 1120, 1116, 1113, 1118, 1115, 1116, 1126, 1129, 1122,
     1129, 1130, 1126, 1127, 1133, 1133, 1137, 1135, 1136, 1133,
     1141, 1139, 1144, 1151, 1143, 1153, 1145, 1699, 1182, 1184,
     1188, 1192, 1196
    } ;

static yyconst flex_int16_t yy_def[1434] =
    {   0,
     1428,    1, 1428, 1428, 1428, 1428, 1429, 1428, 1428, 1430,
     1428, 1428, 1428, 1431, 1431, 1431, 1431, 1428, 1428, 1431,
     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,
       25, 1431, 1431, 1431, 1428, 1429, 1428, 1428, 1432, 1433,
     1428, 1431, 1428, 1431, 1431, 1431, 1431, 1431, 1431, 1431,
     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,
     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,
     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,
     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431,
     1431, 1431, 1431, 1431, 1431, 1431, 1432, 1428, 1433, 1431,

     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1428, 1428,
     1428, 1428, 1428, 1431, 1431, 1431, 1431, 1431, 1431, 1428,
     1431, 1428, 1431, 1431, 1431, 1428, 1431, 1428, 1428, 1428,
     1428, 1428, 1431, 1431, 1431, 1431, 1431, 1431, 1428, 1428,
     1431, 1431, 1431, 1431, 1431, 1428, 1428, 1431, 1428, 1431,
     1431, 1431, 1428, 1428, 1431, 1428, 1428, 1431, 1428, 1431,
     1431, 1431, 1431, 1431, 1428, 1431, 1428, 1431, 1431, 1431,
     1431, 1431, 1431, 1431, 1428, 1431, 1431, 1428, 1428, 1428,
     1428, 1428, 1428, 1431, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1431,

     1428, 1431, 1428, 1428, 1428, 1431, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1431, 1431, 1428, 1431, 1428, 1431, 1428, 1428,
     1428, 1428, 1428, 1428, 1431, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1431, 1431, 1431, 1431, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,

     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,

     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,

     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,

     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,

     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,

     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,

     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,

     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,

     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,

     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,

     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,

     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428,    0, 1428, 1428,
     1428, 1428, 1428
    } ;

static yyconst flex_int16_t yy_nxt[1749] =
    {   0,
        4,    5,    6,    5,    7,    4,    8,    9,   10,   11,
       12,    4,    4,   13,   14,   15,   16,   14,   14,   14,
       14,   17,   14,   14,   14,   18,   19,   20,   14,   21,
       22,   14,   14,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   14,   14,   14,   34,   14,   35,
       43,   35,   38,   38,   38,   38,   38,   38,   43,   46,
       43,   43,   44,   43,   43,   43,   43,   43,   43,   44,
       45,   44,   43,   43,   35,  100,   35,   43,   48,   49,
      737,   60,   94,  109,   72,   43,   61,   50,   63,   62,
       43,   43,   40,   47,   47,   43,   73,  101,   47,   47,

       47,   74,   75,   77,   76,   79,   78,   43,   38,   38,
       80,   47,   47,   47,   47,   47,   43,  110,   95,  111,
       96,   43,  112,   43,   90,   43,   43,   43,   43,   91,
       43,   43,   51,   43,   52,   43,   53,   54,  738,   92,
       93,   55,   56,   57,  102,   58,  103,  104,  108,  113,
       43,  105,  106,   59,   43,  122,  107,   43,  120,   43,
      124,  123,  128,   43,  739,  129,   43,  125,  126,  130,
       43,  740,   64,   43,   65,   66,   43,   43,  741,   67,
       68,   69,  131,   70,  143,  132,  114,   43,  151,  121,
       43,   71,   81,   43,   82,   83,   43,   43,  742,   84,

       85,   86,  139,   87,   88,  115,  127,  116,  117,   43,
       43,   89,  118,  141,  134,  140,  135,  136,   43,  146,
      142,  137,  133,   43,  119,   43,   43,   43,  147,  149,
      153,  154,  156,  138,  144,  157,   43,   43,   43,   43,
       43,  145,  159,   43,  160,  165,  161,  162,   43,   43,
       43,  163,   43,   43,  167,   43,  152,   43,  743,  148,
      150,   43,   43,  164,   43,  744,  158,   43,  175,  168,
      745,  155,  166,  170,  178,  169,   43,  746,  171,  747,
      172,  173,   43,  179,  177,  176,  180,  174,  181,  182,
      183,   43,  184,  190,   43,  191,   43,   43,   43,  192,

      193,   43,  194,   43,  195,  197,  199,   43,   43,  203,
       43,  201,   43,   43,   43,  205,  212,   43,  213,   43,
      214,  215,  216,   43,   43,  217,   43,  220,   43,   43,
       43,  221,   43,   43,  748,   43,  222,  225,  227,   43,
      200,  749,  202,  231,   43,   43,   43,  233,  234,  206,
      238,   43,  241,  243,  235,   43,   43,  244,   43,  245,
       43,   43,   43,  246,   43,   43,  750,   43,  226,  247,
      223,   43,  228,  249,  224,  251,  252,   43,  253,  751,
      255,   43,  257,   43,   43,  258,  259,  254,  261,  256,
       43,  262,  269,   43,   43,  285,   43,  287,  291,   43,

       43,  308,  309,   43,  311,   43,   43,  313,  320,   43,
       43,  338,   43,  339,  340,   43,   43,  341,  752,   43,
      753,   43,   43,  754,  755,   43,  756,  757,  758,  759,
      760,  761,  762,  763,  764,  765,  766,  767,  768,  769,
      770,  771,  772,  773,  774,  775,  776,  777,  778,  779,
      780,  781,  782,  783,  784,  785,  786,  787,  788,  789,
      790,  791,  792,  793,  794,  795,  796,  797,  798,  799,
      800,  801,  802,  803,  804,  805,  806,  807,  808,  809,
      810,  811,  812,  813,  814,  815,  816,  817,  818,  819,
      820,  821,  822,  823,  824,  825,  826,  827,  828,  829,

      830,  831,  832,  833,  834,  835,  836,  837,  838,  839,
      840,  841,  842,  843,  844,  845,  846,  847,  848,  849,
      850,  851,  852,  853,  854,  855,  856,  857,  858,  859,
      860,  861,  862,  863,  864,  865,  866,  867,  868,  869,
      870,  871,  872,  873,  874,  875,  876,  877,  878,  879,
      880,  881,  882,  883,  884,  885,  886,  887,  888,  889,
      890,  891,  892,  893,  894,  895,  896,  897,  898,  899,
      900,  901,  902,  903,  904,  905,  906,  907,  908,  909,
      910,  911,  912,  913,  914,  915,  916,  917,  918,  919,
      920,  921,  922,  923,  924,  925,  926,  927,  928,  929,

      930,  931,  932,  933,  934,  935,  936,  937,  938,  939,
      940,  941,  942,  943,  944,  945,  946,  947,  948,  949,
      950,  951,  952,  953,  954,  955,  956,  957,  958,  959,
      960,  961,  962,  963,  964,  965,  966,  967,  968,  969,
      970,  971,  972,  973,  974,  975,  976,  977,  978,  979,
      980,  981,  982,  983,  984,  985,  986,  987,  988,  989,
      990,  991,  992,  993,  994,  995,  996,  997,  998,  999,
     1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009,
     1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019,
     1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029,

     1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039,
     1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049,
     1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059,
     1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069,
     1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079,
     1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089,
     1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099,
     1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109,
     1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119,
     1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129,

     1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139,
     1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149,
     1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159,
     1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169,
     1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179,
     1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189,
     1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199,
     1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209,
     1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219,
     1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229,

     1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239,
     1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249,
     1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259,
     1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269,
     1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279,
     1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289,
     1290, 1290, 1290, 1290, 1290, 1291, 1292, 1293, 1294, 1295,
     1296, 1290, 1297, 1290, 1298, 1299, 1300, 1301, 1302, 1290,
     1303, 1304, 1290, 1290, 1290, 1290, 1290, 1305, 1306, 1307,
     1308, 1309, 1310, 1290, 1290, 1311, 1312, 1313, 1314, 1315,

     1316, 1317, 1318, 1319, 1290, 1290, 1320, 1290, 1321, 1322,
     1323, 1290, 1290, 1324, 1290, 1290, 1325, 1290, 1326, 1327,
     1328, 1329, 1330, 1290, 1331, 1290, 1332, 1333, 1334, 1335,
     1336, 1337, 1338, 1339, 1340, 1290, 1341, 1342, 1343, 1344,
     1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354,
     1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364,
     1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374,
     1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384,
     1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394,
     1395, 1396, 1397, 1398, 1399, 1400, 1401, 1290, 1290, 1290,

     1290, 1290, 1290, 1402, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290, 1403, 1290, 1404, 1290, 1290, 1405, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1406, 1407, 1290,
     1408, 1290, 1409, 1290, 1290, 1290, 1410, 1290, 1290, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1411, 1412, 1413,
     1414, 1290, 1290, 1290, 1290, 1290, 1415, 1416, 1417, 1418,
     1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1290,
     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290,
     1290, 1290,   36,   36,   36,   36,   36,   39,   39,   42,
       42,   42,   42,   97,   97,   97,   97,   99,  736,   99,

      735,  734,  733,  732,  731,  730,  729,  728,  727,  726,
      725,  724,  723,  722,  721,  720,  719,  718,  717,  716,
      715,  714,  713,  712,  711,  710,  709,  708,  707,  706,
      705,  704,  703,  702,  701,  700,  699,  698,  697,  696,
      695,  694,  693,  692,  691,  690,  689,  688,  687,  686,
      685,  684,  683,  682,  681,  680,  679,  678,  677,  676,
      675,  674,  673,  672,  671,  670,  669,  668,  667,  666,
      665,  664,  663,  662,  661,  660,  659,  658,  657,  656,
      655,  654,  653,  652,  651,  650,  649,  648,  647,  646,
      645,  644,  643,  642,  641,  640,  639,  638,  637,  636,

      635,  634,  633,  632,  631,  630,  629,  628,  627,  626,
      625,  624,  623,  622,  621,  620,  619,  618,  617,  616,
      615,  614,  613,  612,  611,  610,  609,  608,  607,  606,
      605,  604,  603,  602,  601,  600,  599,  598,  597,  596,
      595,  594,  593,  592,  591,  590,  589,  588,  587,  586,
      585,  584,  583,  582,  581,  580,  579,  578,  577,  576,
      575,  574,  573,  572,  571,  570,  569,  568,  567,  566,
      565,  564,  563,  562,  561,  560,  559,  558,  557,  556,
      555,  554,  553,  552,  551,  550,  549,  548,  547,  546,
      545,  544,  543,  542,  541,  540,  539,  538,  537,  536,

      535,  534,  533,  532,  531,  530,  529,  528,  527,  526,
      525,  524,  523,  522,  521,  520,  519,  518,  517,  516,
      515,  514,  513,  512,  511,  510,  509,  508,  507,  506,
      505,  504,  503,  502,  501,  500,  499,  498,  497,  496,
      495,  494,  493,  492,  491,  490,  489,  488,  487,  486,
      485,  484,  483,  482,  481,  480,  479,  478,  477,  476,
      475,  474,  473,  472,  471,  470,  469,  468,  467,  466,
      465,  464,  463,  462,  461,  460,  459,  458,  457,  456,
      455,  454,  453,  452,  451,  450,  449,  448,  447,  446,
      445,  444,  443,  442,  441,  440,  439,  438,  437,  436,

      435,  434,  433,  432,  431,  430,  429,  428,  427,  426,
      425,  424,  423,  422,  421,  420,  419,  418,  417,  416,
      415,  414,  413,  412,  411,  410,  409,  408,  407,  406,
      405,  404,  403,  402,  401,  400,  399,  398,  397,  396,
      395,  394,  393,  392,  391,  390,  389,  388,  387,  386,
      385,  384,  383,  382,  381,  380,  379,  378,  377,  376,
      375,  374,  373,  372,  371,  370,  369,  368,  367,  366,
      365,  364,  363,  362,  361,  360,  359,  358,  357,  356,
      355,  354,  353,  352,  351,  350,  349,  348,  347,  346,
      345,  344,  343,  342,  337,  336,  335,  334,  333,  332,

      331,  330,  329,  328,  327,  326,  325,  324,  323,  322,
      321,  319,  318,  317,  316,  315,  314,  312,  310,  307,
      306,  305,  304,  303,  302,  301,  300,  299,  298,  297,
      296,  295,  294,  293,  292,  290,  289,  288,  286,  284,
      283,  282,  281,  280,  279,  278,  277,  276,  275,  274,
      273,  272,  271,  270,  268,  267,  266,  265,  264,  263,
      260,  250,  248,  242,  240,  239,  237,  236,  232,  230,
      229,  219,  218,  211,  210,  209,  208,  207,  204,  198,
      196,  189,  188,  187,  186,  185,   43,   43,   98,   43,
       43,   43,   98,   37,   43,   41,   37, 1428,    3, 1428,

     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428
    } ;

static yyconst flex_int16_t yy_chk[1749] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    5,
       16,    5,    9,    9,   11,   11,   12,   12,   15,   16,
       20,   24,   15,   22,   23,   26,   33,   45,   27,   15,
       15,   15,   28,   29,   35,   45,   35,   30,   20,   20,
      652,   22,   33,   52,   26,   46,   22,   20,   24,   23,
       34,   52,   11,   17,   17,   17,   27,   46,   17,   17,

       17,   27,   27,   29,   28,   30,   29,   32,   38,   38,
       30,   17,   17,   17,   17,   17,   21,   53,   34,   54,
       34,   48,   55,   51,   32,   53,   61,   54,   49,   32,
       55,   60,   21,   50,   21,   62,   21,   21,  653,   32,
       32,   21,   21,   21,   48,   21,   49,   49,   51,   56,
       73,   49,   50,   21,   25,   59,   50,   56,   58,   79,
       61,   60,   64,   59,  654,   65,   58,   62,   63,   66,
       64,  655,   25,   65,   25,   25,   63,   66,  656,   25,
       25,   25,   67,   25,   73,   68,   56,   57,   79,   58,
       67,   25,   31,   68,   31,   31,   69,   72,  657,   31,

       31,   31,   70,   31,   31,   57,   63,   57,   57,   74,
       70,   31,   57,   72,   69,   71,   69,   69,   75,   76,
       72,   69,   68,   71,   57,   80,   86,   76,   77,   78,
       81,   82,   83,   69,   74,   84,   77,   78,   81,   82,
       83,   75,   85,   84,   86,   87,   86,   86,   91,   88,
       85,   86,   90,   87,   89,   95,   80,   92,  658,   77,
       78,   96,   89,   86,   93,  659,   84,  108,   94,   90,
      660,   82,   88,   91,  102,   90,   94,  661,   91,  662,
       92,   93,  102,  103,   96,   95,  104,   93,  105,  106,
      107,  103,  108,  114,  104,  115,  105,  106,  107,  116,

      117,  114,  118,  115,  119,  121,  123,  116,  117,  125,
      118,  124,  119,  121,  123,  127,  133,  125,  134,  124,
      135,  136,  137,  127,  133,  138,  134,  141,  135,  136,
      137,  142,  152,  138,  663,  141,  143,  144,  145,  142,
      123,  664,  124,  148,  143,  144,  145,  150,  151,  127,
      155,  148,  158,  160,  152,  150,  151,  161,  155,  162,
      158,  160,  170,  163,  171,  161,  665,  162,  144,  164,
      143,  163,  145,  166,  143,  168,  169,  164,  170,  666,
      171,  166,  172,  168,  169,  173,  174,  170,  176,  171,
      172,  177,  184,  173,  174,  200,  176,  202,  206,  177,

      184,  223,  224,  200,  226,  202,  206,  228,  235,  223,
      224,  253,  226,  254,  255,  228,  235,  256,  667,  253,
      668,  254,  255,  669,  670,  256,  671,  672,  673,  674,
      675,  676,  677,  678,  679,  680,  681,  682,  683,  684,
      685,  686,  687,  688,  689,  690,  691,  692,  693,  694,
      695,  696,  697,  698,  699,  700,  701,  702,  703,  704,
      705,  706,  707,  708,  709,  710,  711,  712,  713,  714,
      715,  716,  717,  718,  719,  720,  721,  722,  723,  724,
      725,  726,  727,  728,  729,  730,  731,  732,  733,  734,
      735,  736,  737,  738,  739,  740,  741,  742,  743,  744,

      745,  746,  747,  748,  749,  750,  751,  752,  753,  754,
      755,  756,  757,  758,  759,  760,  761,  762,  763,  764,
      765,  766,  767,  768,  769,  770,  771,  772,  773,  774,
      775,  776,  777,  778,  779,  780,  781,  782,  783,  784,
      785,  786,  787,  788,  789,  790,  791,  792,  793,  794,
      795,  796,  797,  798,  799,  800,  801,  802,  803,  804,
      805,  806,  807,  808,  809,  810,  811,  812,  813,  814,
      815,  816,  817,  818,  819,  820,  821,  822,  823,  824,
      825,  826,  827,  828,  829,  830,  831,  832,  833,  834,
      835,  836,  837,  838,  839,  840,  841,  842,  843,  844,

      845,  846,  847,  848,  849,  850,  851,  852,  853,  854,
      855,  856,  857,  858,  859,  860,  861,  862,  863,  864,
      865,  866,  867,  868,  869,  870,  871,  872,  873,  874,
      875,  876,  877,  878,  879,  880,  881,  882,  883,  884,
      885,  886,  887,  888,  889,  890,  891,  892,  893,  894,
      895,  896,  897,  898,  899,  900,  901,  902,  903,  904,
      905,  906,  907,  908,  909,  910,  911,  912,  913,  914,
      915,  916,  917,  918,  919,  920,  921,  922,  923,  924,
      925,  926,  927,  928,  929,  930,  931,  932,  933,  934,
      935,  936,  937,  938,  939,  940,  941,  942,  943,  944,

      945,  946,  947,  948,  949,  950,  951,  952,  953,  954,
      955,  956,  957,  958,  959,  960,  961,  962,  963,  964,
      965,  966,  967,  968,  969,  970,  971,  972,  973,  974,
      975,  976,  977,  978,  979,  980,  981,  982,  983,  984,
      985,  986,  987,  988,  989,  990,  991,  992,  993,  994,
      995,  996,  997,  998,  999, 1000, 1001, 1002, 1003, 1004,
     1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014,
     1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024,
     1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034,
     1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044,

     1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054,
     1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064,
     1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074,
     1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084,
     1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094,
     1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104,
     1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114,
     1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124,
     1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134,
     1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144,

     1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154,
     1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164,
     1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174,
     1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184,
     1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194,
     1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204,
     1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214,
     1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224,
     1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234,
     1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244,

     1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254,
     1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264,
     1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274,
     1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284,
     1285, 1286, 1287, 1288, 1289, 1291, 1292, 1293, 1294, 1295,
     1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305,
     1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315,
     1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325,
     1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335,
     1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345,

     1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355,
     1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365,
     1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375,
     1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385,
     1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395,
     1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405,
     1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415,
     1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425,
     1426, 1427, 1429, 1429, 1429, 1429, 1429, 1430, 1430, 1431,
     1431, 1431, 1431, 1432, 1432, 1432, 1432, 1433,  651, 1433,

      650,  649,  648,  647,  646,  645,  644,  643,  642,  641,
      640,  639,  638,  637,  636,  635,  634,  633,  632,  631,
      630,  629,  628,  627,  626,  625,  624,  623,  622,  621,
      620,  619,  618,  617,  616,  615,  614,  613,  612,  611,
      610,  609,  608,  607,  606,  605,  604,  603,  602,  601,
      600,  599,  598,  597,  596,  595,  594,  593,  592,  591,
      590,  589,  588,  587,  586,  585,  584,  583,  582,  581,
      580,  579,  578,  577,  576,  575,  574,  573,  572,  571,
      570,  569,  568,  567,  566,  565,  564,  563,  562,  561,
      560,  559,  558,  557,  556,  555,  554,  553,  552,  551,

      550,  549,  548,  547,  546,  545,  544,  543,  542,  541,
      540,  539,  538,  537,  536,  535,  534,  533,  532,  531,
      530,  529,  528,  527,  526,  525,  524,  523,  522,  521,
      520,  519,  518,  517,  516,  515,  514,  513,  512,  511,
      510,  509,  508,  507,  506,  505,  504,  503,  502,  501,
      500,  499,  498,  497,  496,  495,  494,  493,  492,  491,
      490,  489,  488,  487,  486,  485,  484,  483,  482,  481,
      480,  479,  478,  477,  476,  475,  474,  473,  472,  471,
      470,  469,  468,  467,  466,  465,  464,  463,  462,  461,
      460,  459,  458,  457,  456,  455,  454,  453,  452,  451,

      450,  449,  448,  447,  446,  445,  444,  443,  442,  441,
      440,  439,  438,  437,  436,  435,  434,  433,  432,  431,
      430,  429,  428,  427,  426,  425,  424,  423,  422,  421,
      420,  419,  418,  417,  416,  415,  414,  413,  412,  411,
      410,  409,  408,  407,  406,  405,  404,  403,  402,  401,
      400,  399,  398,  397,  396,  395,  394,  393,  392,  391,
      390,  389,  388,  387,  386,  385,  384,  383,  382,  381,
      380,  379,  378,  377,  376,  375,  374,  373,  372,  371,
      370,  369,  368,  367,  366,  365,  364,  363,  362,  361,
      360,  359,  358,  357,  356,  355,  354,  353,  352,  351,

      350,  349,  348,  347,  346,  345,  344,  343,  342,  341,
      340,  339,  338,  337,  336,  335,  334,  333,  332,  331,
      330,  329,  328,  327,  326,  325,  324,  323,  322,  321,
      320,  319,  318,  317,  316,  315,  314,  313,  312,  311,
      310,  309,  308,  307,  306,  305,  304,  303,  302,  301,
      300,  299,  298,  297,  296,  295,  294,  293,  292,  291,
      290,  289,  288,  287,  286,  285,  284,  283,  282,  281,
      280,  279,  278,  277,  276,  275,  274,  273,  272,  271,
      270,  269,  268,  267,  266,  265,  264,  263,  262,  261,
      260,  259,  258,  257,  252,  251,  250,  249,  248,  247,

      246,  245,  244,  243,  242,  241,  240,  239,  238,  237,
      236,  234,  233,  232,  231,  230,  229,  227,  225,  222,
      221,  220,  219,  218,  217,  216,  215,  214,  213,  212,
      211,  210,  209,  208,  207,  205,  204,  203,  201,  199,
      198,  197,  196,  195,  194,  193,  192,  191,  190,  189,
      188,  187,  186,  185,  183,  182,  181,  180,  179,  178,
      175,  167,  165,  159,  157,  156,  154,  153,  149,  147,
      146,  140,  139,  132,  131,  130,  129,  128,  126,  122,
      120,  113,  112,  111,  110,  109,  101,  100,   97,   47,
       44,   42,   39,   36,   14,   13,    7,    3, 1428, 1428,

     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[19] =
    {   0,
0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer_with_table.l"
/* ---- Start Of Table ---- */
/* ---- End Of Table ---- */
#line 14 "lexer_with_table.l"

#include <cstdio>
#include <cstdlib>
#include <string>
#include "parser.hpp"
#include "main.hpp"
#include "color.hpp"
using namespace std;

#define TYPE( type ) if(1==0)printf("Type: " #type "\n")
#define TRACE printf( GREEN "Found token '%s'" RESET "\n" ,yytext)
#line 1350 "lexer.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 30 "lexer_with_table.l"


#line 1540 "lexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1429 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1699 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 32 "lexer_with_table.l"
{ return COMMA;             }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 33 "lexer_with_table.l"
{ return LeBraket;          }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 34 "lexer_with_table.l"
{ return RiBraket;          }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 35 "lexer_with_table.l"
{ TYPE( EQU ); return T_EQU;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 36 "lexer_with_table.l"
{ return T_DUP;             }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 37 "lexer_with_table.l"
{ return T_DB_QuestionMark; }
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 38 "lexer_with_table.l"
{ TYPE( EOF );  yyterminate(); return T_EOF; }
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 39 "lexer_with_table.l"
{ TYPE( NEW LINE ); return NEW_LINE; }
	YY_BREAK
case 8:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 41 "lexer_with_table.l"
{ TYPE( Comment ); return COMMENT; }  /* Ignore comment */
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 44 "lexer_with_table.l"
;  /* Ignore whitespace */
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 46 "lexer_with_table.l"
{ 
                            TRACE;
                            yylval.ObjectCode = (ObjectCode) strtol(&(yytext[1]), NULL, 16);
                            return REGISTER;
                          }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 52 "lexer_with_table.l"
{ 
                            TRACE;
                            yylval.ObjectCode = (ObjectCode) strtol(&(yytext[0]), NULL, 16);
                            return IMMEDIATE; 
                          }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 58 "lexer_with_table.l"
{ 
                            TYPE( IMMEDIATE );
                            TRACE;
                            yylval.ObjectCode = (ObjectCode) strtol(&(yytext[0]), NULL, 10);
                            return IMMEDIATE; 
                          }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 65 "lexer_with_table.l"
{ 
                            TYPE( Size );TRACE;
                            yylval.str_ptr  = new string( yytext );
                            return SIZE;
                          }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 71 "lexer_with_table.l"
{ 
                            TYPE( OP );TRACE;
                            yylval.str_ptr  = new string( yytext );
                            return OP;
                          }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 77 "lexer_with_table.l"
{ 
                            TYPE( IDENTIFIER );TRACE;
                            yylval.str_ptr  = new string( yytext );
                            return IDENTIFIER;
                          }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 83 "lexer_with_table.l"
{
                            TYPE( DIRECTIVE );TRACE;
                            yylval.str_ptr  = new string( yytext );
                            return DIRECTIVE;
                          }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 89 "lexer_with_table.l"
{
                            TYPE( LABEL );TRACE;
                            yylval.str_ptr  = new string( yytext );
                            return LABEL;
                          }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 95 "lexer_with_table.l"
ECHO;
	YY_BREAK
#line 1764 "lexer.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1429 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1429 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1428);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 95 "lexer_with_table.l"




